from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (KeyboardButton, Message, ReplyKeyboardMarkup)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import random
import Model
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup

class CommandWord:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'

# –í–º–µ—Å—Ç–æ BOT TOKEN HERE –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
BOT_TOKEN = '' #–∑–∞–ø–æ–ª–Ω–∏—Ç—å
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# C–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup, –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–π FSM
class FSMFillForm(StatesGroup):
    fill_word = State()  
    fill_deleted_word = State() 
    fill_c_w = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
start_word = KeyboardButton(text="–î–∞–≤–∞–π")
exit = KeyboardButton(text="–í—ã—Ö–æ–¥")
r_w, c_w, w1, w2, w3 = Model.get_random_number_from_db()
add_word = KeyboardButton(text=CommandWord.ADD_WORD)
delete_word = KeyboardButton(text=CommandWord.DELETE_WORD)
next_word = KeyboardButton(text=CommandWord.NEXT)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
keyboard1 = ReplyKeyboardMarkup(keyboard=[[start_word, add_word, delete_word, exit]], resize_keyboard=True,one_time_keyboard=True)
next_btn = KeyboardButton(text=CommandWord.NEXT)
add_word_btn = KeyboardButton(text=CommandWord.ADD_WORD)
delete_word_btn = KeyboardButton(text=CommandWord.DELETE_WORD)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(Command(commands=["start","card"]))
async def process_start_command(message: Message):
    await message.answer(
        text= 
        '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. \n –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ. \n –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: \n –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï, \n —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n –ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è',
        reply_markup=keyboard1
    )
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É –í—ã—Ö–æ–¥ –∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "–í—ã—Ö–æ–¥", StateFilter(default_state))
async def end_command(message: Message, state: FSMContext):
    await message.answer(
        text= 
        "–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –¥–æ –≤—Å—Ç—Ä–µ—á–∏!!!", reply_markup=keyboard1
    )
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï" –∏ —Å–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(F.text=='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï', StateFilter(default_state))
async def process_add_word_answer(message: Message, state: FSMContext):
    user_id = message.chat.id
    Model.add_new_user_id(user_id)
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
    await state.set_state(FSMFillForm.fill_word)
    

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
@dp.message(StateFilter(FSMFillForm.fill_word))
async def fill_db_russian_word(message: Message, state: FSMContext):
    user_id = message.chat.id
    fill_word=message.text
    Model.add_new_word(user_id,fill_word)
    await message.answer(text='–ì–æ—Ç–æ–≤–æ! –ë—É–¥–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?',
        reply_markup=keyboard1)
# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()
    
# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ—Ç–≤–µ—Ç "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ" 
@dp.message(F.text=='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô', StateFilter(default_state))
async def process_delete_word(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å,–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
    await state.set_state(FSMFillForm.fill_deleted_word)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–ª–æ–≤–æ
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
@dp.message(StateFilter(FSMFillForm.fill_deleted_word))
async def fill_db_deleted_word(message: Message, state: FSMContext):
    user_id = message.chat.id
    delete_word=message.text
    if Model.delete_word(user_id,delete_word):
        await message.reply(f"–°–ª–æ–≤–æ '{delete_word}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard1)
    else:
        await message.reply(f"–°–ª–æ–≤–æ '{delete_word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard1)
# –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


@dp.message(F.text == "–î–∞–≤–∞–π", StateFilter(default_state))
async def start_command(message: Message, state: FSMContext):
    user_id = message.chat.id
    r_w, c_w, w1, w2, w3 = Model.get_random_number_from_db(user_id)
    print(c_w)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(correct_word=c_w)
    answers_keyboard = [KeyboardButton(text=c_w)] + [KeyboardButton(text=w1)] + [KeyboardButton(text=w2)] + [KeyboardButton(text=w3)]
    random.shuffle(answers_keyboard)
    builder = ReplyKeyboardBuilder()
    builder.row(*answers_keyboard,exit, width = 3)
    ans_keyboard_obj = builder.as_markup()
    await message.answer(
        text= 
        f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {r_w}",
        reply_markup=ans_keyboard_obj
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
    await state.set_state(FSMFillForm.fill_c_w)
    return r_w, c_w, w1, w2, w3


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç 

@dp.message(StateFilter(FSMFillForm.fill_c_w))
async def process_answer(message: Message, state: FSMContext):
    user_data = await state.get_data()
    c_w = user_data.get('correct_word')
    print(c_w)
    if message.text == c_w:
        await message.answer(
            text='–î–∞, –Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ, –≤—ã –ø—Ä–∞–≤—ã!–ü—Ä–æ–¥–æ–ª–∂–∏–º?', reply_markup=keyboard1
        )
        await state.clear()
    else:
        await message.answer(
        text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –æ—à–∏–±–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞'
    )
    

if __name__ == '__main__':
    dp.run_polling(bot)